{
    "Parameters" : {

    },
    "Resources" : {
        "vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-vpc"}
                ]
            }
        },
        "igw" : {
            "Type" : "AWS::EC2::InternetGateway"
        },
        "pub_subnet_a" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.0.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-a"}
                ]
            }
        },
        "pub_subnet_b" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.1.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-b"}
                ]
            }
        },
        "pub_rt" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-route-table"}
                ]
            }
        },
        "pub_rt_default_route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : {"Ref" : "pub_rt"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "igw"}
            }
        },
        "rta_pub_a" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "pub_rt"},
                "SubnetId" : {"Ref" : "pub_subnet_a"}
            }
        },
        "rta_pub_b" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "pub_rt"},
                "SubnetId" : {"Ref" : "pub_subnet_b"}
            }
        },
        "eip" : {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-webapp-test-eip"}
                ]
            }
        },
        "ngw" : {
            "Type" : "AWS::EC2::NatGateway",
            "AllocationId" : { "Fn::GetAtt" : ["eip", "AllocationId"]},
            "SubnetId" : { "Ref" : "pub_subnet_a"}
        },
        "priv_subnet_a" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.2.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-a"}
                ]
            }
        },
        "priv_subnet_b" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.3.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-b"}
                ]
            }
        },
        "priv_rt" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-route-table"}
                ]
            }
        },
        "priv_rt_default_route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : {"Ref" : "pub_rt"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "ngw"}
            }
        },
        "rta_priv_a" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "priv_rt"},
                "SubnetId" : {"Ref" : "priv_subnet_a"}
            }
        },
        "rta_priv_b" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "priv_rt"},
                "SubnetId" : {"Ref" : "priv_subnet_b"}
            }
        },
        "subnet_group" : {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "SubnetIds": [
                    { "Ref" : "priv_subnet_a" },
                    { "Ref" : "priv_subnet_b" }
                ],
                "DBSubnetGroupName": "test-subnet-group"
            }
        },
        "db_sg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "VpcId" : {"Ref" : "vpc"},
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : 0,
                "ToPort" : 3306,
                "CidrIp" : "10.0.0.0/16"
            }]
        },
        "ecs_sg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "VpcId" : {"Ref" : "vpc"},
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : 32768,
                "ToPort" : 60999,
                "CidrIp" : "0.0.0.0/0"
            }],
            "SecurityGroupEgress" : [{
                "IpProtocol" : "-1",
                "FromPort" : 0,
                "ToPort" : 0,
                "CidrIp" : "0.0.0.0/0"
            }]
        },
        "instance" : {
            "Type" : "AWS::RDS::DBInstance",
            "AllocatedStorage" : 5,
            "StorageType" : "gp2",
            "Engine" : "mysql",
            "InstanceClass" : "db.t2.micro",
            "DBName" : "test-instance",
            "Name" : "testdb",
            "MasterUsername" : "",
            "MasterUserPassword" : "",
            "DBSubnetGroupName": { "Ref" : "subnet_group" },
            "VPCSecurityGroups": [
                { "Ref" : "db_sg" }
            ],
            "MultiAZ": true
        },
        "ecs_service_role" : {
            "Type" : "AWS::IAM::Role",
            "RoleName" : "flask_ecs_service_role",
            "Path" : "/",
            "AssumeRolePolicyDocument" : { "Ref" : "ecs_service_policy" }
        }
    }
}
