{
    "Parameters" : {

    },
    "Resources" : {
        "vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-vpc"}
                ]
            }
        },
        "igw" : {
            "Type" : "AWS::EC2::InternetGateway"
        },
        "pub_subnet_a" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.0.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-a"}
                ]
            }
        },
        "pub_subnet_b" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.1.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-b"}
                ]
            }
        },
        "pub_rt" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-route-table"}
                ]
            }
        },
        "pub_rt_default_route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : {"Ref" : "pub_rt"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "igw"}
            }
        },
        "rta_pub_a" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "pub_rt"},
                "SubnetId" : {"Ref" : "pub_subnet_a"}
            }
        },
        "rta_pub_b" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "pub_rt"},
                "SubnetId" : {"Ref" : "pub_subnet_b"}
            }
        },
        "eip" : {
            "Type" : "AWS::EC2::EIP",
            "Properties" : {
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-webapp-test-eip"}
                ]
            }
        },
        "ngw" : {
            "Type" : "AWS::EC2::NatGateway",
            "AllocationId" : { "Fn::GetAtt" : ["eip", "AllocationId"]},
            "SubnetId" : { "Ref" : "pub_subnet_a"}
        },
        "priv_subnet_a" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.2.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-a"}
                ]
            }
        },
        "priv_subnet_b" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "CidrBlock" : "10.0.3.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-b"}
                ]
            }
        },
        "priv_rt" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-route-table"}
                ]
            }
        },
        "priv_rt_default_route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : {"Ref" : "pub_rt"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "ngw"}
            }
        },
        "rta_priv_a" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "priv_rt"},
                "SubnetId" : {"Ref" : "priv_subnet_a"}
            }
        },
        "rta_priv_b" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "priv_rt"},
                "SubnetId" : {"Ref" : "priv_subnet_b"}
            }
        },
        "subnet_group" : {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "SubnetIds": [
                    { "Ref" : "priv_subnet_a" },
                    { "Ref" : "priv_subnet_b" }
                ],
                "DBSubnetGroupName": "test-subnet-group"
            }
        },
        "db_sg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "VpcId" : {"Ref" : "vpc"},
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : 0,
                "ToPort" : 3306,
                "CidrIp" : "10.0.0.0/16"
            }]
        },
        "ecs_sg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "VpcId" : {"Ref" : "vpc"},
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : 32768,
                "ToPort" : 60999,
                "CidrIp" : "0.0.0.0/0"
            }],
            "SecurityGroupEgress" : [{
                "IpProtocol" : "-1",
                "FromPort" : 0,
                "ToPort" : 0,
                "CidrIp" : "0.0.0.0/0"
            }]
        },
        "db_instance" : {
            "Type" : "AWS::RDS::DBInstance",
            "AllocatedStorage" : 5,
            "StorageType" : "gp2",
            "Engine" : "mysql",
            "InstanceClass" : "db.t2.micro",
            "DBName" : "test-instance",
            "Name" : "testdb",
            "MasterUsername" : "",
            "MasterUserPassword" : "",
            "DBSubnetGroupName": { "Ref" : "subnet_group" },
            "VPCSecurityGroups": [
                { "Ref" : "db_sg" }
            ],
            "MultiAZ": true
        },
        "ecs_service_role" : {
            "Type" : "AWS::IAM::Role",
            "RoleName" : "flask-ecs-service-role",
            "Path" : "/",
            "ManagedPolicyArns" : [
                { "Ref" : "ecs_service_policy" }
            ]
        },
        "ecs_service_policy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "flask-ecs-service-policy",
                "PolicyDocument" : {
                    "Statement" : [
                        { "Effect" : "Allow", "Action" : "sts:AssumeRole" }
                    ]
                }
            }
        },
        "ecs_instance_role" : {
            "Type" : "AWS::IAM::Role",
            "RoleName" : "flask-ecs-instance-role",
            "Path" : "/",
            "ManagedPolicyArns" : [
                { "Ref" : "ecs_instance_policy" },
                "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
            ]
        },
        "ecs_instance_policy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "flask-ecs-service-policy",
                "PolicyDocument" : {
                    "Statement" : [
                        { "Effect" : "Allow", "Action" : "sts:AssumeRole" }
                    ]
                }
            }
        },
        "flask_instance_profile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName" : "flask-instance-profile",
                "Roles" : [
                    { "Ref" : "ecs_instance_role" }
                ]
            }
        },
        "asg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AutoScalingGroupName" : "flask-webapp-asg",
                "MinSize" : 1,
                "MaxSize" : 2,
                "LaunchConfigurationName" : { "Ref" : "lc" },
                "VPCZoneIdentifier" : [
                    { "Ref" : "priv_subnet_a" },
                    { "Ref" : "priv_subnet_b" }
                ],
                "Tags" : [
                    { "Key" : "Name", "Value" : "flask-webapp-asg", "PropagateAtLaunch" : true }
                ]
            }
        },
        "lc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "LaunchConfigurationName" : "flask-webapp-lc",
                "ImageId" : "ami-0650e7d86452db33b",
                "InstanceType" : "t2.medium",
                "KeyName" : "sallai-key",
                "IamInstanceProfile" : { "Ref" : "flask_instance_profile" },
                "SecurityGroups" : [
                    { "Ref" : "ecs_sg" }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "#!/bin/bash",
                                "mkdir /etc/ecs",
                                {
                                    "Fn::Sub": [
                                        "echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config",
                                        { "ClusterName": { "Ref" : "cluster" } }
                                    ]
                                },
                                "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
                            ]
                        ]
                    }
                }
            }
        },
        "bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "BucketName" : "flask-demo-bucket"
            }
        },
        "ecr_repo" : {
            "Type" : "AWS::ECR::Repository",
            "Properties" : {
                "RepositoryName" : "flask-webapp-test-repo"
            }
        },
        "cluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
                "ClusterName" : "flask-webapp-cluster"
            }
        },
        "service" : {
            "Type" : "AWS::ECS::Service",
            "Properties" : {
                "ServiceName" : "flask-webapp-service",
                "Cluster" : { "Ref" : "cluster" },
                "TaskDefinition" : { "Ref" : "flask_webapp_task_def" },
                "DesiredCount" : 3,
                "Role" : { "Ref" : "ecs_service_role" },
                "LoadBalancer" : [
                    {
                        "TargetGroupArn" : { "Ref" : "lb_tg" },
                        "ContainerPort" : 5000,
                        "ContainerName" : "flask-webapp"
                    }
                ]
            }
        },
        "flask_webapp_task_def" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "Family" : "flask-webapp",
                "ContainerDefinitions" : [
                    {
                        "Name" : "flask-webapp",
                        "Image" : "464255417364.dkr.ecr.eu-central-1.amazonaws.com/sallai-test:0.0.1",
                        "Memory" : 512,
                        "Cpu" : 1,
                        "Essential" : true,
                        "PortMappings" : [
                            {
                                "ContainerPort" : 5000,
                                "HostPort" : 0
                            }
                        ]
                    }
                ]
            }
        },
        "flask_webapp_load_balancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Name" : "flask-webapp-load-balancer",
                "Scheme" : "internet-facing",
                "Type" : "application",
                "SecurityGroups" : [
                    { "Ref" : "lb_sg" }
                ],
                "Subnets" : [
                    { "Ref" : "priv_subnet_a" },
                    { "Ref" : "priv_subnet_b" }
                ]
            },
            "DependsOn" : "igw"
        },
        "lb_sg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "VpcId" : {"Ref" : "vpc"},
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp",
                "FromPort" : 0,
                "ToPort" : 80,
                "CidrIp" : "00.0.0.0/0"
            }]
        },
        "lb_tg" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Name" : "flask-webapp-tg",
                "Port" : 80,
                "Protocol" : "HTTP",
                "VpcId" : { "Ref" : "vpc" }
            },
            "DependsOn" : "flask_webapp_load_balancer"
        },
        "listener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : { "Ref" : "flask_webapp_load_balancer" },
                "Port" : 80,
                "Protocol" : "HTTP",
                "DefaultActions" : [
                    {
                        "TargetGroupArn" : { "Ref" : "lb_tg" },
                        "Type" : "forward"
                    }
                ]
            }
        }
    }
}
