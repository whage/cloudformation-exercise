{
    "Outputs" : {
        "LoadBalancerDNSName": {
            "Value" : { "Fn::GetAtt" : [ "FlaskWebappLoadBalancer", "DNSName" ] }
        }
    },
    "Parameters" : {
        "MasterUserPassword" : {
            "Type" : "String",
            "Default" : "password1234",
        },
        "MasterUsername" : {
            "Type" : "String",
            "Default" : "flaskwebapproot"
        },
        "DBInstanceClass" : {
            "Type" : "String",
            "AllowedValues" : [
                "db.t2.micro",
                "db.r4.large",
                "db.m4.large"
            ],
            "Default" : "db.t2.micro"
        },
        "ContainerImageName" : {
            "Type" : "String",
            "Default" : "464255417364.dkr.ecr.eu-central-1.amazonaws.com/sallai-test:0.0.1"
        },
        "ContainerPort" : {
            "Type" : "Number",
            "Default" : 5000
        },
        "AMIId" : {
            "Type" : "String",
            "Default" : "ami-0650e7d86452db33b"
        },
        "KeyPairName" : {
            "Type" : "String",
            "Default" : "sallai-key"
        }
    },
    "Resources" : {
        "Vpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-vpc"}
                ]
            }
        },
        "Igw" : {
            "Type" : "AWS::EC2::InternetGateway"
        },
        "IgwAttachment" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "InternetGatewayId" : { "Ref" : "Igw" },
                "VpcId" : { "Ref" : "Vpc" },
            }
        },
        "PubSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "CidrBlock" : "10.0.0.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-a"}
                ]
            }
        },
        "PubSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "CidrBlock" : "10.0.1.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-subnet-b"}
                ]
            }
        },
        "PubRT" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-pub-route-table"}
                ]
            }
        },
        "PubRTDefaultRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "Igw",
            "Properties" : {
                "RouteTableId" : {"Ref" : "PubRT"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId" : {"Ref" : "Igw"}
            }
        },
        "RTAPubA" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "PubRT"},
                "SubnetId" : {"Ref" : "PubSubnetA"}
            }
        },
        "RTAPubB" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "PubRT"},
                "SubnetId" : {"Ref" : "PubSubnetB"}
            }
        },
        "Eip" : {
            "Type" : "AWS::EC2::EIP",
        },
        "NGW" : {
            "Type" : "AWS::EC2::NatGateway",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : ["Eip", "AllocationId"]},
                "SubnetId" : { "Ref" : "PubSubnetA"}
            }
        },
        "PrivSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "CidrBlock" : "10.0.2.0/24",
                "AvailabilityZone" : "eu-central-1a",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-a"}
                ]
            }
        },
        "PrivSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "CidrBlock" : "10.0.3.0/24",
                "AvailabilityZone" : "eu-central-1b",
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-subnet-b"}
                ]
            }
        },
        "PrivRT" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "Vpc"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "flask-priv-route-table"}
                ]
            }
        },
        "RTAPrivA" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "PrivRT"},
                "SubnetId" : {"Ref" : "PrivSubnetA"}
            }
        },
        "RTAPrivB" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId": {"Ref" : "PrivRT"},
                "SubnetId" : {"Ref" : "PrivSubnetB"}
            }
        },
        "SubnetGroup" : {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "db subnet group",
                "SubnetIds": [
                    { "Ref" : "PrivSubnetA" },
                    { "Ref" : "PrivSubnetB" }
                ],
                "DBSubnetGroupName": "test-subnet-group"
            }
        },
        "DBSG" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "db sg",
                "VpcId" : {"Ref" : "Vpc"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : 0,
                    "ToPort" : 3306,
                    "CidrIp" : "10.0.0.0/16"
                }]
            }
        },
        "ECSSG" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "ecs sg",
                "VpcId" : {"Ref" : "Vpc"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : 32768,
                    "ToPort" : 60999,
                    "CidrIp" : "0.0.0.0/0"
                }],
                "SecurityGroupEgress" : [{
                    "IpProtocol" : "-1",
                    "FromPort" : 0,
                    "ToPort" : 0,
                    "CidrIp" : "0.0.0.0/0"
                }]
            }
        },
        "DBInstance" : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "AllocatedStorage" : 5,
                "StorageType" : "gp2",
                "Engine" : "mysql",
                "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
                "DBInstanceIdentifier" : "test-instance",
                "DBName" : "testdb",
                "MasterUsername" : { "Ref" : "MasterUsername" },
                "MasterUserPassword" : { "Ref" : "MasterUserPassword" },
                "DBSubnetGroupName": { "Ref" : "SubnetGroup" },
                "VPCSecurityGroups": [
                    { "Ref" : "DBSG" }
                ],
                "MultiAZ": true
            }
        },
        "ECSServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : "sts:AssumeRole",
                            "Principal" : {
                                "Service" : ["ecs.amazonaws.com", "ec2.amazonaws.com", "application-autoscaling.amazonaws.com", "ecs-tasks.amazonaws.com"]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"],
                "RoleName" : "flask-ecs-service-role",
                "Path" : "/",
            }
        },
        "ECSInstanceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Action" : "sts:AssumeRole",
                            "Principal" : {
                                "Service" : ["ecs.amazonaws.com", "ec2.amazonaws.com", "application-autoscaling.amazonaws.com", "ecs-tasks.amazonaws.com"]
                            }
                        }
                    ]
                },
                "RoleName" : "flask-ecs-instance-role",
                "Path" : "/",
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ]
            }
        },
        "FlaskInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName" : "flask-instance-profile",
                "Roles" : [
                    { "Ref" : "ECSInstanceRole" }
                ]
            }
        },
        "ASG" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AutoScalingGroupName" : "flask-webapp-asg",
                "MinSize" : 1,
                "MaxSize" : 2,
                "LaunchConfigurationName" : { "Ref" : "LC" },
                "VPCZoneIdentifier" : [
                    { "Ref" : "PrivSubnetA" },
                    { "Ref" : "PrivSubnetB" }
                ],
                "Tags" : [
                    { "Key" : "Name", "Value" : "flask-webapp-asg", "PropagateAtLaunch" : true }
                ]
            }
        },
        "LC" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "LaunchConfigurationName" : "flask-webapp-lc",
                "ImageId" : { "Ref" : "AMIId" },
                "InstanceType" : "t2.medium",
                "KeyName" : { "Ref" : "KeyPairName" },
                "IamInstanceProfile" : { "Ref" : "FlaskInstanceProfile" },
                "SecurityGroups" : [
                    { "Ref" : "ECSSG" }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "#!/bin/bash",
                                "mkdir /etc/ecs",
                                {
                                    "Fn::Sub": [
                                        "echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config",
                                        { "ClusterName": { "Ref" : "Cluster" } }
                                    ]
                                },
                                "sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm"
                            ]
                        ]
                    }
                }
            }
        },
        "Bucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
                "BucketName" : "flask-demo-bucket"
            }
        },
        "ECRRepo" : {
            "Type" : "AWS::ECR::Repository",
            "Properties" : {
                "RepositoryName" : "flask-webapp-test-repo"
            }
        },
        "Cluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
                "ClusterName" : "flask-webapp-cluster"
            }
        },
        "Service" : {
            "Type" : "AWS::ECS::Service",
            "Properties" : {
                "ServiceName" : "flask-webapp-service",
                "Cluster" : { "Ref" : "Cluster" },
                "TaskDefinition" : { "Ref" : "FlaskWebappTaskDef" },
                "DesiredCount" : 3,
                "Role" : { "Ref" : "ECSServiceRole" },
                "LoadBalancers" : [
                    {
                        "TargetGroupArn" : { "Ref" : "LBTG" },
                        "ContainerPort" : { "Ref" : "ContainerPort" },
                        "ContainerName" : "flask-webapp"
                    }
                ]
            },
            "DependsOn" : "Listener"
        },
        "FlaskWebappTaskDef" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "Family" : "flask-webapp",
                "ContainerDefinitions" : [
                    {
                        "Name" : "flask-webapp",
                        "Image" : { "Ref" : "ContainerImageName" },
                        "Memory" : 512,
                        "Cpu" : 1,
                        "Essential" : true,
                        "PortMappings" : [
                            {
                                "ContainerPort" : { "Ref" : "ContainerPort" },
                                "HostPort" : 0
                            }
                        ]
                    }
                ]
            }
        },
        "FlaskWebappLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Name" : "flask-webapp-load-balancer",
                "Scheme" : "internet-facing",
                "Type" : "application",
                "SecurityGroups" : [
                    { "Ref" : "LBSG" }
                ],
                "Subnets" : [
                    { "Ref" : "PrivSubnetA" },
                    { "Ref" : "PrivSubnetB" }
                ]
            },
            "DependsOn" : "Igw"
        },
        "LBSG" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "lb sg",
                "VpcId" : {"Ref" : "Vpc"},
                "SecurityGroupIngress" : [{
                    "IpProtocol" : "tcp",
                    "FromPort" : 0,
                    "ToPort" : 80,
                    "CidrIp" : "0.0.0.0/0"
                }]
            }
        },
        "LBTG" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "Name" : "flask-webapp-tg",
                "Port" : 80,
                "Protocol" : "HTTP",
                "VpcId" : { "Ref" : "Vpc" }
            },
            "DependsOn" : "FlaskWebappLoadBalancer"
        },
        "Listener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "LoadBalancerArn" : { "Ref" : "FlaskWebappLoadBalancer" },
                "Port" : 80,
                "Protocol" : "HTTP",
                "DefaultActions" : [
                    {
                        "TargetGroupArn" : { "Ref" : "LBTG" },
                        "Type" : "forward"
                    }
                ]
            }
        }
    }
}
